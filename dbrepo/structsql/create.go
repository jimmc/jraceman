package structsql

import (
  "strings"

  "github.com/jimmc/jraceman/dbrepo/conn"

  "github.com/golang/glog"
)

type ColumnInfosUpdater interface {
  UpdateColumnInfos(columnInfos []ColumnInfo) []ColumnInfo
}

// Placeholder is ? for MySQL,$N for PostgreSQL,
// SQLite uses either of those, Oracle is :param1

// CreateTable creates a table with the given name and with columns
// based on the fields of the given entity by using the sql string
// generated by CreateTableSql.
func CreateTable(db conn.DB, tableName string, entity interface{}) error {
  return CreateTableWithUpdater(db, tableName, entity, nil)
}

// CreateTableWithUpdater creates a table with the given name and with columns
// based on the fields of the given entity by using the sql string
// generated by CreateTableSqlWithUpdater.
func CreateTableWithUpdater(db conn.DB, tableName string, entity interface{}, updater ColumnInfosUpdater) error {
  sql := CreateTableSqlWithUpdater(tableName, entity, updater)
  _, err := db.Exec(sql)
  return err
}

// CreateTableSql generates an SQL CREATE TABLE command using
// the fields of the given struct. For each field in the struct:
//   * The field name is converted to lower case for the column name.
//   * int and string fields are declared as that same type column.
//   * The id field is declared as primary key.
//   * Non-pointer fields are declared as not null.
//   * Field names ending in ID are declared as foreign key references to the
//     id field of a table whose name matches the first part of the field name
func CreateTableSql(tableName string, entity interface{}) string {
  columnInfos := ColumnInfos(entity);
  return CreateTableSqlFromColumnInfos(tableName, columnInfos)
}

// CreateTableSqlWithUpdater generates an SQL CREATE TABLE command using
// the fields of the given struct modified by the updater.
func CreateTableSqlWithUpdater(tableName string, entity interface{}, updater ColumnInfosUpdater) string {
  columnInfos := ColumnInfos(entity)
  if updater != nil {   // Pass a nil interface value to skip doing this update
    glog.V(2).Infof("CreateTableSql calling UpdateColumnInfo for table %s", tableName)
    columnInfos = updater.UpdateColumnInfos(columnInfos)
  }
  return CreateTableSqlFromColumnInfos(tableName, columnInfos)
}

// CreateTableSql generates an SQL CREATE TABLE command using the given column info.
func CreateTableSqlFromColumnInfos(tableName string, columnInfos []ColumnInfo) string {
  columnSpecs := make([]string, len(columnInfos))
  for i, colInfo := range columnInfos {
    columnSpecs[i] = ColumnSpec(colInfo)
  }
  sql := "CREATE TABLE " + tableName + "(" + strings.Join(columnSpecs, ", ") + ");"
  glog.V(1).Infof("CreateTableSql: %v\n", sql)
  return sql
}
